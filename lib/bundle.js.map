{"version":3,"file":"bundle.js","sources":["../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/eventUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/style/cell.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/cellRenderers/renderCheckbox.tsx","../src/cellRenderers/renderToggleGroup.tsx","../src/cellRenderers/renderValue.tsx","../src/DataGridDefaultRenderersProvider.ts","../src/cellRenderers/SelectCellFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useColumnWidths.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingTabIndex.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/DragHandle.tsx","../src/EditCell.tsx","../src/GroupedColumnHeaderCell.tsx","../src/renderHeaderCell.tsx","../src/HeaderCell.tsx","../src/style/row.ts","../src/HeaderRow.tsx","../src/GroupedColumnHeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/ScrollToCell.tsx","../src/sortStatus.tsx","../src/style/core.ts","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/TreeDataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  const vKey = 86;\n  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n\nexport function isValueInBetween(value: number, num1: number, num2: number) {\n  if (num1 >= num2) {\n    return value <= num1 && value >= num2;\n  }\n  return value >= num1 && value <= num2;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultCellRenderer,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = headerCell.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    if (event.dataTransfer.types.includes(dragDropKey)) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey);\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.HTMLAttributes<HTMLDivElement> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={sortable ? onKeyDown : undefined}\n      {...draggableProps}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <div\n          className={resizeHandleClassname}\n          onClick={stopPropagation}\n          onDoubleClick={onDoubleClick}\n          onPointerDown={onPointerDown}\n        />\n      )}\n    </div>\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n","import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  rangeSelectionMode,\n  onMouseDownCapture,\n  onMouseUpCapture,\n  onMouseEnter,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  function onMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (rangeSelectionMode) {\n      selectCellWrapper(false);\n    }\n  }\n\n  function getOnMouseEvent(handler: typeof onMouseDownCapture) {\n    function onMouseEvent(event: React.MouseEvent<HTMLDivElement>) {\n      if (handler) {\n        const cellEvent = createCellEvent(event);\n        handler({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      }\n    }\n\n    return onMouseEvent;\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      onMouseDown={onMouseDown}\n      onMouseDownCapture={getOnMouseEvent(onMouseDownCapture)}\n      onMouseUpCapture={getOnMouseEvent(onMouseUpCapture)}\n      onMouseEnter={getOnMouseEvent(onMouseEnter)}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => React.JSX.Element;\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle, isValueInBetween } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    selectedCellIdx,\n    selectedCellsRange,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    onCellMouseDown,\n    onCellMouseUp,\n    onCellMouseEnter,\n    selectCell,\n    rangeSelectionMode,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected =\n      selectedCellIdx === idx ||\n      (rangeSelectionMode &&\n        isValueInBetween(idx, selectedCellsRange.startIdx, selectedCellsRange.endIdx));\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n          onMouseDownCapture={onCellMouseDown}\n          onMouseUpCapture={onCellMouseUp}\n          onMouseEnter={onCellMouseEnter}\n          rangeSelectionMode={rangeSelectionMode}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n","import {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  isValueInBetween,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellSelectArgs,\n  CellsRange,\n  Column,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  MultiCopyEvent,\n  MultiPasteEvent,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable' | 'draggable'\n>;\n\nconst initialSelectedRange: CellsRange = {\n  startRowIdx: -1,\n  startColumnIdx: -1,\n  endRowIdx: -1,\n  endColumnIdx: -1\n};\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n  onCopy?: Maybe<(event: CopyEvent<NoInfer<R>>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<NoInfer<R>>) => NoInfer<R>>;\n  onMultiPaste?: Maybe<(event: MultiPasteEvent) => void>;\n  onMultiCopy?: Maybe<(event: MultiCopyEvent<NoInfer<R>>) => void>;\n  rangeLeftBoundaryColIdx?: Maybe<number>;\n  onSelectedRangeChange?: Maybe<(selectedRange: CellsRange) => void>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n  /** @default false, set true to enable range selection with copy and paste through clipboard */\n  enableRangeSelection?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    onMultiPaste,\n    onMultiCopy,\n    rangeLeftBoundaryColIdx,\n    onSelectedRangeChange,\n\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    enableRangeSelection: rawEnableRangeSelection,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const enableRangeSelection = rawEnableRangeSelection ?? false;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  const [selectedRange, setSelectedRange] = useState<CellsRange>(initialSelectedRange);\n  const [copiedRange, setCopiedRange] = useState<CellsRange | null>(null);\n  const [isMouseRangeSelectionMode, setIsMouseRangeSelectionMode] = useState<boolean>(false);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n  const rangeLeftBoundary =\n    typeof rangeLeftBoundaryColIdx === 'undefined' || rangeLeftBoundaryColIdx == null\n      ? -1\n      : rangeLeftBoundaryColIdx;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const setSelectedRangeWithBoundary = (value: CellsRange) => {\n    const boundValue = {\n      ...value\n    };\n    if (boundValue.startColumnIdx <= rangeLeftBoundary) {\n      boundValue.startColumnIdx = rangeLeftBoundary + 1;\n    }\n    if (boundValue.endColumnIdx > rangeLeftBoundary) {\n      setSelectedRange(boundValue);\n    }\n  };\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  useEffect(() => {\n    onSelectedRangeChange?.(selectedRange);\n  }, [selectedRange, onSelectedRangeChange]);\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null || onMultiCopy != null || onMultiPaste != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        // copy highlighted text only\n        if (window.getSelection()?.isCollapsed === false) return;\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (event.shiftKey) {\n      switch (event.key) {\n        case 'ArrowUp':\n          if (selectedRange.endRowIdx > 0) {\n            setSelectedRangeWithBoundary({\n              ...selectedRange,\n              endRowIdx: selectedRange.endRowIdx - 1\n            });\n          }\n          break;\n        case 'ArrowDown':\n          if (selectedRange.endRowIdx < rows.length - 1) {\n            setSelectedRangeWithBoundary({\n              ...selectedRange,\n              endRowIdx: selectedRange.endRowIdx + 1\n            });\n          }\n          break;\n        case 'ArrowRight':\n          if (selectedRange.endColumnIdx < columns.length - 1) {\n            setSelectedRangeWithBoundary({\n              ...selectedRange,\n              endColumnIdx: selectedRange.endColumnIdx + 1\n            });\n          }\n          break;\n        case 'ArrowLeft':\n          if (selectedRange.endColumnIdx > 0) {\n            setSelectedRangeWithBoundary({\n              ...selectedRange,\n              endColumnIdx: selectedRange.endColumnIdx - 1\n            });\n          }\n          break;\n        default:\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case 'Escape':\n          setCopiedCell(null);\n          return;\n        case 'ArrowUp':\n        case 'ArrowDown':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n        case 'Tab':\n        case 'Home':\n        case 'End':\n        case 'PageUp':\n        case 'PageDown':\n          navigate(event);\n          break;\n        default:\n          handleCellInput(event);\n          break;\n      }\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    if (enableRangeSelection) {\n      setCopiedRange(selectedRange);\n      const sourceRows = rows.slice(selectedRange.startRowIdx, selectedRange.endRowIdx + 1);\n      const sourceColumnKeys = columns\n        .slice(selectedRange.startColumnIdx, selectedRange.endColumnIdx + 1)\n        .map((c) => c.key);\n      onMultiCopy?.({\n        cellsRange: selectedRange,\n        sourceRows,\n        sourceColumnKeys\n      });\n    } else {\n      const { idx, rowIdx } = selectedPosition;\n      const sourceRow = rows[rowIdx];\n      const sourceColumnKey = columns[idx].key;\n      setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n      onCopy?.({ sourceRow, sourceColumnKey });\n    }\n  }\n\n  function handlePaste() {\n    if (enableRangeSelection) {\n      if (!onMultiPaste || !onRowsChange || copiedRange === null) {\n        return;\n      }\n\n      onMultiPaste({\n        copiedRange,\n        targetRange: selectedRange\n      });\n    } else {\n      if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n        return;\n      }\n\n      const { idx, rowIdx } = selectedPosition;\n      const targetColumn = columns[idx];\n      const targetRow = rows[rowIdx];\n\n      const updatedTargetRow = onPaste({\n        sourceRow: copiedCell.row,\n        sourceColumnKey: copiedCell.columnKey,\n        targetRow,\n        targetColumnKey: targetColumn.key\n      });\n\n      updateRow(targetColumn, rowIdx, updatedTargetRow);\n    }\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n      setSelectedRange({\n        startColumnIdx: position.idx,\n        startRowIdx: position.rowIdx,\n        endColumnIdx: position.idx,\n        endRowIdx: position.rowIdx\n      });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          selectedCellsRange:\n            enableRangeSelection &&\n            isValueInBetween(rowIdx, selectedRange.startRowIdx, selectedRange.endRowIdx)\n              ? {\n                  startIdx: selectedRange.startColumnIdx,\n                  endIdx: selectedRange.endColumnIdx\n                }\n              : { startIdx: -1, endIdx: -1 },\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx),\n          rangeSelectionMode: enableRangeSelection,\n          onCellMouseDown: () => setIsMouseRangeSelectionMode(true),\n          onCellMouseUp() {\n            setIsMouseRangeSelectionMode(false);\n\n            // Once the ranges are decided, re-evaluate start and end;\n            setSelectedRange((boundValue) => ({\n              startColumnIdx: Math.min(boundValue.startColumnIdx, boundValue.endColumnIdx),\n              endColumnIdx: Math.max(boundValue.startColumnIdx, boundValue.endColumnIdx),\n              startRowIdx: Math.min(boundValue.startRowIdx, boundValue.endRowIdx),\n              endRowIdx: Math.max(boundValue.startRowIdx, boundValue.endRowIdx)\n            }));\n          },\n          onCellMouseEnter({ column }) {\n            if (isMouseRangeSelectionMode && enableRangeSelection) {\n              setSelectedRangeWithBoundary({\n                ...selectedRange,\n                endRowIdx: rowIdx,\n                endColumnIdx: column.idx\n              });\n            }\n          }\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + 1 + rowIdx;\n                const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    key={rowIdx}\n                    aria-rowindex={gridRowStart}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n      </DataGridDefaultRenderersProvider>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child, .${cellFrozen}),\n    > :nth-last-child(n + 2 of .${cellFrozen}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  groupBy,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(\n  props: GroupRowRendererProps<R, SR>\n) => React.JSX.Element;\n","import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  Column,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup } from './cellRenderers';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<\n    DataGridProps<R, SR, K>,\n    'columns' | 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill'\n  > {\n  columns: readonly Column<NoInfer<R>, NoInfer<SR>>[];\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<NoInfer<R>>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (\n    rows: readonly NoInfer<R>[],\n    columnKey: string\n  ) => Record<string, readonly NoInfer<R>[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => React.JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","stopPropagation","event","scrollIntoView","element","inline","block","createCellEvent","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","vKey","keyCode","has","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","closest","querySelectorAll","length","measuringCellClassname","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","_jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","rowIdx","isCellEditableUtil","renderEditCell","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","mainHeaderRowIdx","topSummaryRowsCount","type","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","level","setHeaderGroupColAndRowSpan","nextColumn","parentRowIdx","found","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","nextParentRowIdx","canExitGrid","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","getRowStyle","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","insetBlockStart","gridRowStart","getCellStyle","index","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","min","max","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","getHeaderCellRowSpan","isValueInBetween","value","num1","num2","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","renderCheckbox","onChange","props","handleChange","checked","nativeEvent","_jsxs","disabled","children","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","height","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultCellRenderer","defaultSortable","defaultResizable","defaultDraggable","draggable","headerRowsCount","useMemo","collectColumns","rawColumn","calculatedColumnParent","headerCellClass","push","sort","aKey","frozenA","bKey","frozenB","forEach","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","set","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useColumnWidths","gridRef","gridWidth","resizedColumnWidths","measuredColumnWidths","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","horizontalScrollbarHeight","setHorizontalScrollbarHeight","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialHorizontalScrollbarHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","DragHandle","columnWidth","latestDraggedOverRowIdx","isCellEditable","onRowsChange","onFill","onClick","setDragging","setDraggedOverRowIdx","handleMouseDown","preventDefault","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","startRowIndex","endRowIndex","updateRows","handleDoubleClick","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","getStyle","marginEnd","isLastColumn","marginInlineEnd","marginBlockEnd","onMouseDown","onDoubleClick","cellEditing","EditCell","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","_Fragment","GroupedColumnHeaderCell","isCellSelected","selectCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","SortableHeaderCell","renderSortStatus","cellSortableClassname","cellResizable","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDragging","cellDraggingClassname","cellOver","cellOverClassname","HeaderCell","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","direction","dragDropKey","isDragging","setIsDragging","isOver","setIsOver","isRtl","sortIndex","findIndex","sortColumn","ariaSort","defaultRenderHeaderCell","onPointerDown","pointerType","pointerId","headerCell","parentElement","right","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","onDragStart","dataTransfer","setData","dropEffect","onDragEnd","onDragOver","onDrop","types","includes","sourceKey","getData","onDragEnter","isEventPertinent","onDragLeave","draggableProps","relatedTarget","contains","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","topSummaryRowClassname","bottomSummaryRowClassname","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","useId","cells","memo","GroupedColumnHeaderRow","renderedParents","add","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","onContextMenu","rangeSelectionMode","onMouseUpCapture","onMouseEnter","isEditable","selectCellWrapper","openEditor","handleClick","handleContextMenu","handleRowChange","newRow","getOnMouseEvent","handler","onMouseEvent","Row","selectedCellsRange","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onCellMouseDown","onCellMouseUp","onCellMouseEnter","handleDragEnter","endIdx","RowComponent","forwardRef","defaultRenderRow","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","summaryRow","topSummaryRow","summaryRowClassname","SummaryRow","bottom","isTop","ariaRowIndex","initialSelectedRange","startColumnIdx","endColumnIdx","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onCopy","onPaste","onMultiPaste","onMultiCopy","rangeLeftBoundaryColIdx","onSelectedRangeChange","rawEnableVirtualization","enableRangeSelection","rawEnableRangeSelection","renderers","rawDirection","rawRole","ariaDescribedBy","rawAriaRowCount","testId","defaultRenderers","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","setScrollTop","setScrollLeft","copiedCell","setCopiedCell","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","selectedRange","setSelectedRange","copiedRange","setCopiedRange","isMouseRangeSelectionMode","setIsMouseRangeSelectionMode","prevSelectedPosition","lastSelectedRowIdx","focusSinkRef","shouldFocusCellRef","isTreeGrid","headerRowsHeight","summaryRowsHeight","isSelectable","leftKey","rightKey","ariaRowCount","rangeLeftBoundary","defaultGridComponents","allRowsSelected","every","setSelectedRangeWithBoundary","boundValue","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","scrollHeight","handleColumnResizeLatest","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","isSamePosition","focus","preventScroll","focusCellOrCellContent","useImperativeHandle","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","previousRowIdx","indexOf","step","Element","isCellEvent","isRowEvent","cKey","getSelection","isCollapsed","handleCopy","handlePaste","handleCellInput","handleScroll","commitEditorChanges","sourceRows","slice","sourceColumnKeys","c","cellsRange","sourceColumnKey","targetRange","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","isCellWithinEditBounds","enableEditor","samePosition","getCellToScroll","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","elementToFocus","renderDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","Array","from","_","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2","GroupCell","id","childRows","groupColumnIndex","isGroupByColumn","toggleGroupWrapper","isLevelMatching","cursor","groupRow","groupRowClassname","GroupedRow","groupBy","handleSelectGroup","setSize","posInSet","TreeDataGrid","rawRows","rawRowKeyGetter","rawOnCellKeyDown","rawSelectedRows","rawOnSelectedRowsChange","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","rawRenderRow","toggleGroupLatest","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childGroups","childRowsCount","isGroupRow","allGroupRows","flattenedRows","expandGroup","parentId","isReadonlyArray","keys","getParentRowAndIndex","parentRow","parentRowAndIndex","groupIndex","isGroupRowSelected","cr","newRawSelectedRows","handleRowsChange","updatedRawRows","rawIndexes","rawIndex","groupId","newExpandedGroupIds","rowProps","arr","isArray","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"mappings":"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"}